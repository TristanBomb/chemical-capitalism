/* Generated by the Nim Compiler v0.18.0 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI3640 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3644 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI67002 = {size: 0, kind: 14, base: null, node: null, finalizer: null};
var NTI44002 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI67261 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI67258 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI67255 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI78240 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3660 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI78221 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI78202 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI78003 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI78183 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI51075 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI14009 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3711 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3706 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3648 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3648 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3648.node = NNI3648;
NTI3706.base = NTI3626;
NTI3711.base = NTI3626;
var NNI3626 = {kind: 2, len: 5, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3706, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3711, name: "up", sons: null}]};
NTI3626.node = NNI3626;
var NNI3608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3608.node = NNI3608;
NTI3626.base = NTI3608;
NTI3648.base = NTI3626;
var NNI14009 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI14009.node = NNI14009;
var NNI51075 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "num", len: 0, typ: NTI104, name: "num", sons: null}, 
{kind: 1, offset: "den", len: 0, typ: NTI104, name: "den", sons: null}]};
NTI51075.node = NNI51075;
var NNI78183 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI78183.node = NNI78183;
var NNI78003 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "units", len: 0, typ: NTI138, name: "units", sons: null}, 
{kind: 1, offset: "value", len: 0, typ: NTI51075, name: "value", sons: null}]};
NTI78003.node = NNI78003;
NTI78003.base = NTI3608;
NTI78183.base = NTI78003;
var NNI78202 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI78202.node = NNI78202;
NTI78202.base = NTI78003;
var NNI78221 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI78221.node = NNI78221;
NTI78221.base = NTI78003;
var NNI3660 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3660.node = NNI3660;
NTI3660.base = NTI3626;
var NNI67002 = {kind: 2, offset: 0, typ: null, name: null, len: 14, sons: {"1": {kind: 1, offset: 1, typ: NTI67002, name: "H", len: 0, sons: null}, 
"3": {kind: 1, offset: 3, typ: NTI67002, name: "Li", len: 0, sons: null}, 
"5": {kind: 1, offset: 5, typ: NTI67002, name: "B", len: 0, sons: null}, 
"6": {kind: 1, offset: 6, typ: NTI67002, name: "C", len: 0, sons: null}, 
"7": {kind: 1, offset: 7, typ: NTI67002, name: "N", len: 0, sons: null}, 
"8": {kind: 1, offset: 8, typ: NTI67002, name: "O", len: 0, sons: null}, 
"11": {kind: 1, offset: 11, typ: NTI67002, name: "Na", len: 0, sons: null}, 
"12": {kind: 1, offset: 12, typ: NTI67002, name: "Mg", len: 0, sons: null}, 
"13": {kind: 1, offset: 13, typ: NTI67002, name: "Al", len: 0, sons: null}, 
"14": {kind: 1, offset: 14, typ: NTI67002, name: "Si", len: 0, sons: null}, 
"15": {kind: 1, offset: 15, typ: NTI67002, name: "P", len: 0, sons: null}, 
"16": {kind: 1, offset: 16, typ: NTI67002, name: "S", len: 0, sons: null}, 
"19": {kind: 1, offset: 19, typ: NTI67002, name: "K", len: 0, sons: null}, 
"50": {kind: 1, offset: 50, typ: NTI67002, name: "Sn", len: 0, sons: null}}};
NTI67002.node = NNI67002;
var NNI67261 = {kind: 2, len: 3, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI44002, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI67002, name: "Field1", sons: null}, 
{kind: 1, offset: "Field2", len: 0, typ: NTI104, name: "Field2", sons: null}]};
NTI67261.node = NNI67261;
NTI67258.base = NTI67261;
var NNI67255 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "data", len: 0, typ: NTI67258, name: "data", sons: null}, 
{kind: 1, offset: "counter", len: 0, typ: NTI104, name: "counter", sons: null}]};
NTI67255.node = NNI67255;
var NNI78240 = {kind: 1, offset: "amount", len: 0, typ: NTI67255, name: "amount", sons: null};
NTI78240.node = NNI78240;
NTI78240.base = NTI78003;
var NNI3650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3650.node = NNI3650;
NTI3650.base = NTI3626;
var NNI3644 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3644.node = NNI3644;
var NNI3640 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3640.node = NNI3640;
NTI3640.base = NTI3626;
NTI3644.base = NTI3640;

function makeNimstrLit(c_15003) {
		    var ln = c_15003.length;
    var result = new Array(ln + 1);
    var i = 0;
    for (; i < ln; ++i) {
      result[i] = c_15003.charCodeAt(i);
    }
    result[i] = 0; // terminating zero
    return result;
    

	
}

function setConstr() {
		      var result = {};
      for (var i = 0; i < arguments.length; ++i) {
        var x = arguments[i];
        if (typeof(x) == "object") {
          for (var j = x[0]; j <= x[1]; ++j) {
            result[j] = true;
          }
        } else {
          result[x] = true;
        }
      }
      return result;
    

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_20217, src_20218, ti_20219) {
	var result_20629 = null;

		switch (ti_20219.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(isFatPointer_20201(ti_20219))) {
			result_20629 = src_20218;
			}
			else {
				result_20629 = [src_20218[0], src_20218[1]];
			}
			
			break;
		case 19:
			      if (dest_20217 === null || dest_20217 === undefined) {
        dest_20217 = {};
      }
      else {
        for (var key in dest_20217) { delete dest_20217[key]; }
      }
      for (var key in src_20218) { dest_20217[key] = src_20218[key]; }
      result_20629 = dest_20217;
    
			break;
		case 18:
		case 17:
			if (!((ti_20219.base == null))) {
			result_20629 = nimCopy(dest_20217, src_20218, ti_20219.base);
			}
			else {
			if ((ti_20219.kind == 17)) {
			result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {m_type: ti_20219} : dest_20217;
			}
			else {
				result_20629 = (dest_20217 === null || dest_20217 === undefined) ? {} : dest_20217;
			}
			}
			nimCopyAux(result_20629, src_20218, ti_20219.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_20218 === null) {
        result_20629 = null;
      }
      else {
        if (dest_20217 === null || dest_20217 === undefined) {
          dest_20217 = new Array(src_20218.length);
        }
        else {
          dest_20217.length = src_20218.length;
        }
        result_20629 = dest_20217;
        for (var i = 0; i < src_20218.length; ++i) {
          result_20629[i] = nimCopy(result_20629[i], src_20218[i], ti_20219.base);
        }
      }
    
			break;
		case 28:
			      if (src_20218 !== null) {
        result_20629 = src_20218.slice(0);
      }
    
			break;
		default: 
			result_20629 = src_20218;
			break;
		}

	return result_20629;

}

function eqStrings(a_17603, b_17604) {
		    if (a_17603 == b_17604) return true;
    if ((!a_17603) || (!b_17604)) return false;
    var alen = a_17603.length;
    if (alen != b_17604.length) return false;
    for (var i = 0; i < alen; ++i)
      if (a_17603[i] != b_17604[i]) return false;
    return true;
  

	
}

function arrayConstr(len_20664, value_20665, typ_20666) {
		      var result = new Array(len_20664);
      for (var i = 0; i < len_20664; ++i) result[i] = nimCopy(null, value_20665, typ_20666);
      return result;
    

	
}

function cstrToNimstr(c_15203) {
		  var ln = c_15203.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_15203.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_15203.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  result[r] = 0; // terminating zero
  return result;
  

	
}

function toJSStr(s_15403) {
		    var len = s_15403.length-1;
    var asciiPart = new Array(len);
    var fcc = String.fromCharCode;
    var nonAsciiPart = null;
    var nonAsciiOffset = 0;
    for (var i = 0; i < len; ++i) {
      if (nonAsciiPart !== null) {
        var offset = (i - nonAsciiOffset) * 2;
        var code = s_15403[i].toString(16);
        if (code.length == 1) {
          code = "0"+code;
        }
        nonAsciiPart[offset] = "%";
        nonAsciiPart[offset + 1] = code;
      }
      else if (s_15403[i] < 128)
        asciiPart[i] = fcc(s_15403[i]);
      else {
        asciiPart.length = i;
        nonAsciiOffset = i;
        nonAsciiPart = new Array((len - i) * 2);
        --i;
      }
    }
    asciiPart = asciiPart.join("");
    return (nonAsciiPart === null) ?
        asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_14406, ename_14407) {
		e_14406.name = ename_14407;
		if ((excHandler == 0)) {
		unhandledException(e_14406);
		}
		
		e_14406.trace = nimCopy(null, rawWriteStackTrace_14228(), NTI138);
		throw e_14406;

	
}

function chckRange(i_20809, a_20810, b_20811) {
			var Tmp1;

	var result_20812 = 0;

	BeforeRet: do {
			if (!(a_20810 <= i_20809)) Tmp1 = false; else {				Tmp1 = (i_20809 <= b_20811);			}		if (Tmp1) {
		result_20812 = i_20809;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_20812;

}

function mnewString(len_15603) {
		      var result = new Array(len_15603+1);
      result[0] = 0;
      result[len_15603] = 0;
      return result;
    

	
}

function addChar(x_20906, c_20907) {
		    x_20906[x_20906.length-1] = c_20907; x_20906.push(0);
  

	
}
var ConstSet2 = setConstr([48, 57]);
var ConstSet3 = setConstr(0, 125);
var ConstSet4 = setConstr([48, 57]);
var ConstSet5 = setConstr([65, 90]);

function addInt(a_17803, b_17804) {
		      var result = a_17803 + b_17804;
      if (result > 2147483647 || result < -2147483648) raiseOverflow();
      return result;
    

	
}
var ConstSet6 = setConstr([97, 122], [65, 90], [48, 57], [128, 255], 95);
var nimvm_6539 = false;
var nim_program_result = 0;
var globalRaiseHook_12005 = [null];
var localRaiseHook_12010 = [null];
var outOfMemHook_12013 = [null];
var objectID_44231 = [0];

function isFatPointer_20201(ti_20203) {
	var result_20204 = false;

	BeforeRet: do {
		result_20204 = !((ConstSet1[ti_20203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_20204;

}

function nimCopyAux(dest_20222, src_20223, n_20225) {
		switch (n_20225.kind) {
		case 0:
			break;
		case 1:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
    
			break;
		case 2:
			L1: do {
				var i_20615 = 0;
				var colontmp__20617 = 0;
				colontmp__20617 = (n_20225.len - 1);
				var res_20620 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_20620 <= colontmp__20617)) break L3;
							i_20615 = res_20620;
							nimCopyAux(dest_20222, src_20223, n_20225.sons[i_20615]);
							res_20620 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_20222[n_20225.offset] = nimCopy(dest_20222[n_20225.offset], src_20223[n_20225.offset], n_20225.typ);
      for (var i = 0; i < n_20225.sons.length; ++i) {
        nimCopyAux(dest_20222, src_20223, n_20225.sons[i][1]);
      }
    
			break;
		}

	
}

function add_12029(x_12032, x_12032_Idx, y_12033) {
		        var len = x_12032[0].length-1;
        for (var i = 0; i < y_12033.length; ++i) {
          x_12032[0][len] = y_12033.charCodeAt(i);
          ++len;
        }
        x_12032[0][len] = 0
      

	
}

function auxWriteStackTrace_14004(f_14006) {
					var Tmp3;

	var result_14007 = [null];

		var it_14015 = f_14006;
		var i_14016 = 0;
		var total_14017 = 0;
		var tempFrames_14021 = arrayConstr(64, {Field0: null, Field1: 0}, NTI14009);
		L1: do {
				L2: while (true) {
					if (!!((it_14015 == null))) Tmp3 = false; else {						Tmp3 = (i_14016 <= 63);					}				if (!Tmp3) break L2;
					tempFrames_14021[i_14016].Field0 = it_14015.procname;
					tempFrames_14021[i_14016].Field1 = it_14015.line;
					i_14016 += 1;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_14015 == null))) break L5;
					total_14017 += 1;
					it_14015 = it_14015.prev;
				}
		} while(false);
		result_14007[0] = nimCopy(null, makeNimstrLit(""), NTI138);
		if (!((total_14017 == i_14016))) {
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("(")); } else { result_14007[0] = makeNimstrLit("(");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr(((total_14017 - i_14016))+"")); } else { result_14007[0] = cstrToNimstr(((total_14017 - i_14016))+"");};
		if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_14007[0] = makeNimstrLit(" calls omitted) ...\x0A");};
		}
		
		L6: do {
			var j_14215 = 0;
			var colontmp__14221 = 0;
			colontmp__14221 = (i_14016 - 1);
			var res_14224 = colontmp__14221;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_14224)) break L8;
						j_14215 = res_14224;
						add_12029(result_14007, 0, tempFrames_14021[j_14215].Field0);
						if ((0 < tempFrames_14021[j_14215].Field1)) {
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit(", line: ")); } else { result_14007[0] = makeNimstrLit(", line: ");};
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(cstrToNimstr((tempFrames_14021[j_14215].Field1)+"")); } else { result_14007[0] = cstrToNimstr((tempFrames_14021[j_14215].Field1)+"");};
						}
						
						if (result_14007[0] != null) { result_14007[0] = (result_14007[0].slice(0, -1)).concat(makeNimstrLit("\x0A")); } else { result_14007[0] = makeNimstrLit("\x0A");};
						res_14224 -= 1;
					}
			} while(false);
		} while(false);

	return result_14007[0];

}

function rawWriteStackTrace_14228() {
	var result_14230 = null;

		if (!((framePtr == null))) {
		result_14230 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A").slice(0,-1)).concat(auxWriteStackTrace_14004(framePtr)), NTI138);
		}
		else {
			result_14230 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_14230;

}

function unhandledException(e_14253) {
			var Tmp1;

		var buf_14254 = [makeNimstrLit("")];
			if (!!(eqStrings(e_14253.message, null))) Tmp1 = false; else {				Tmp1 = !((e_14253.message[0] == 0));			}		if (Tmp1) {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception: ");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(e_14253.message); } else { buf_14254[0] = e_14253.message;};
		}
		else {
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_14254[0] = makeNimstrLit("Error: unhandled exception");};
		}
		
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit(" [")); } else { buf_14254[0] = makeNimstrLit(" [");};
		add_12029(buf_14254, 0, e_14253.name);
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(makeNimstrLit("]\x0A")); } else { buf_14254[0] = makeNimstrLit("]\x0A");};
		if (buf_14254[0] != null) { buf_14254[0] = (buf_14254[0].slice(0, -1)).concat(rawWriteStackTrace_14228()); } else { buf_14254[0] = rawWriteStackTrace_14228();};
		var cbuf_14401 = toJSStr(buf_14254[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_14401);
  }
  else {
    throw cbuf_14401;
  }
  

	
}

function sysFatal_23221(message_23227) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"lib/nim/system.nim",line:0};
	framePtr = F;
		F.line = 2830;
		var e_23229 = null;
		F.line = 2831;
		e_23229 = {m_type: NTI3648, parent: null, name: null, message: null, trace: null, up: null};
		F.line = 2832;
		e_23229.message = nimCopy(null, message_23227, NTI138);
		F.line = 2833;
		raiseException(e_23229, "AssertionError");
	framePtr = F.prev;

	
}

function raiseAssert_23216(msg_23218) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"lib/nim/system.nim",line:0};
	framePtr = F;
		F.line = 3771;
		sysFatal_23221(msg_23218);
	framePtr = F.prev;

	
}

function failedAssertImpl_23239(msg_23241) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"lib/nim/system.nim",line:0};
	framePtr = F;
		F.line = 3778;
		raiseAssert_23216(msg_23241);
	framePtr = F.prev;

	
}

function initRational_51129(num_51133, den_51135) {
	var result_51137 = {num: 0, den: 0};

	var F={procname:"initRational.initRational",prev:framePtr,filename:"lib/nim/pure/rationals.nim",line:0};
	framePtr = F;
		if (!(!((den_51135 == 0)))) {
		F.line = 23;
		failedAssertImpl_23239(makeNimstrLit("\x0Anot (den == 0) a denominator of zero value is invalid"));
		}
		
		F.line = 24;
		result_51137.num = num_51133;
		F.line = 25;
		result_51137.den = den_51135;
	framePtr = F.prev;

	return result_51137;

}

function slashslash__51118(num_51122, den_51124) {
	var result_51126 = {num: 0, den: 0};

	var F={procname:"//.//",prev:framePtr,filename:"lib/nim/pure/rationals.nim",line:0};
	framePtr = F;
		F.line = 27;
		nimCopy(result_51126, initRational_51129(num_51122, den_51124), NTI51075);
	framePtr = F.prev;

	return result_51126;

}

function newMoney_78187() {
	var result_78189 = null;

	var F={procname:"chemical_capitalism.newMoney",prev:framePtr,filename:"chemical_capitalism.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 21;
		result_78189 = {units: makeNimstrLit("$"), value: slashslash__51118(0, 1), m_type: NTI78183};
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_78189;

}

function newEnergy_78206() {
	var result_78208 = null;

	var F={procname:"chemical_capitalism.newEnergy",prev:framePtr,filename:"chemical_capitalism.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 26;
		result_78208 = {units: makeNimstrLit("kJ"), value: slashslash__51118(0, 1), m_type: NTI78202};
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_78208;

}

function newScience_78225() {
	var result_78227 = null;

	var F={procname:"chemical_capitalism.newScience",prev:framePtr,filename:"chemical_capitalism.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 31;
		result_78227 = {units: makeNimstrLit("Sci"), value: slashslash__51118(0, 1), m_type: NTI78221};
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_78227;

}

function isPowerOfTwo_30826(x_30828) {
		var Tmp1;

	var result_30829 = false;

	BeforeRet: do {
		if (!(0 < x_30828)) Tmp1 = false; else {			Tmp1 = ((x_30828 & (x_30828 - 1)) == 0);		}		result_30829 = Tmp1;
		break BeforeRet;
	} while (false);

	return result_30829;

}

function raiseRangeError() {
		var e_14876 = null;
		e_14876 = {m_type: NTI3660, parent: null, name: null, message: null, trace: null, up: null};
		e_14876.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_14876.parent = null;
		raiseException(e_14876, "RangeError");

	
}

function initTable_67730(initialSize_67735) {
	var result_67737 = {data: null, counter: 0};

	var F={procname:"initTable.initTable",prev:framePtr,filename:"lib/nim/pure/collections/tables.nim",line:0};
	framePtr = F;
		if (!(isPowerOfTwo_30826(initialSize_67735))) {
		F.line = 324;
		failedAssertImpl_23239(makeNimstrLit("isPowerOfTwo(initialSize) "));
		}
		
		F.line = 325;
		result_67737.counter = 0;
		F.line = 326;
		result_67737.data = new Array(chckRange(initialSize_67735, 0, 2147483647)); for (var i=0;i<chckRange(initialSize_67735, 0, 2147483647);++i) {result_67737.data[i]={Field0: 0, Field1: 0, Field2: 0};}	framePtr = F.prev;

	return result_67737;

}

function newElements_78250() {
	var result_78252 = null;

	var F={procname:"chemical_capitalism.newElements",prev:framePtr,filename:"chemical_capitalism.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 38;
		result_78252 = {units: makeNimstrLit("$"), value: slashslash__51118(0, 1), amount: initTable_67730(64), m_type: NTI78240};
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_78252;

}

function invalidFormatString_42602() {
		var e_42610 = null;
		e_42610 = {m_type: NTI3650, parent: null, name: null, message: null, trace: null, up: null};
		e_42610.message = nimCopy(null, makeNimstrLit("invalid format string"), NTI138);
		e_42610.parent = null;
		raiseException(e_42610, "ValueError");

	
}

function raiseOverflow() {
		var e_14840 = null;
		e_14840 = {m_type: NTI3644, parent: null, name: null, message: null, trace: null, up: null};
		e_14840.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_14840.parent = null;
		raiseException(e_14840, "OverflowError");

	
}

function nsuToLowerAsciiChar(c_35782) {
	var result_35783 = 0;

	var F={procname:"strutils.toLowerAscii",prev:framePtr,filename:"lib/nim/pure/strutils.nim",line:0};
	framePtr = F;
		if ((ConstSet5[c_35782] != undefined)) {
		F.line = 208;
		result_35783 = chckRange(addInt(c_35782, 32), 0, 255);
		}
		else {
			F.line = 210;
			result_35783 = c_35782;
		}
		
	framePtr = F.prev;

	return result_35783;

}

function nsuCmpIgnoreStyle(a_36047, b_36048) {
						var Tmp7;

	var result_36049 = 0;

		var i_36050 = 0;
		var j_36051 = 0;
		L1: do {
				L2: while (true) {
				if (!true) break L2;
					L3: do {
							L4: while (true) {
							if (!(a_36047[i_36050] == 95)) break L4;
								i_36050 += 1;
							}
					} while(false);
					L5: do {
							L6: while (true) {
							if (!(b_36048[j_36051] == 95)) break L6;
								j_36051 += 1;
							}
					} while(false);
					var aa_36070 = nsuToLowerAsciiChar(a_36047[i_36050]);
					var bb_36071 = nsuToLowerAsciiChar(b_36048[j_36051]);
					result_36049 = (aa_36070 - bb_36071);
						if (!((result_36049 == 0))) Tmp7 = true; else {							Tmp7 = (aa_36070 == 0);						}					if (Tmp7) {
					break L1;
					}
					
					i_36050 += 1;
					j_36051 += 1;
				}
		} while(false);

	return result_36049;

}

function findNormalized_42578(x_42580, inArray_42582) {
	var result_42583 = 0;

	BeforeRet: do {
		var i_42584 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_42584 < (inArray_42582 != null ? (inArray_42582.length-1) : -1))) break L2;
					if ((nsuCmpIgnoreStyle(x_42580, inArray_42582[i_42584]) == 0)) {
					result_42583 = i_42584;
					break BeforeRet;
					}
					
					i_42584 += 2;
				}
		} while(false);
		result_42583 = -1;
		break BeforeRet;
	} while (false);

	return result_42583;

}

function nsuAddf(s_42623, s_42623_Idx, formatstr_42624, a_42626) {
						var Tmp5;
						var Tmp8;
								var Tmp9;
							var Tmp12;

		var i_42629 = 0;
		var num_42630 = 0;
		L1: do {
				L2: while (true) {
				if (!(i_42629 < (formatstr_42624 != null ? formatstr_42624.length-1 : 0))) break L2;
					if ((formatstr_42624[i_42629] == 36)) {
					switch (formatstr_42624[(i_42629 + 1)]) {
					case 35:
						if (((a_42626 != null ? (a_42626.length-1) : -1) < num_42630)) {
						invalidFormatString_42602();
						}
						
						if (s_42623[s_42623_Idx] != null) { s_42623[s_42623_Idx] = (s_42623[s_42623_Idx].slice(0, -1)).concat(a_42626[num_42630]); } else { s_42623[s_42623_Idx] = a_42626[num_42630];};
						i_42629 += 2;
						num_42630 += 1;
						break;
					case 36:
						if (s_42623[s_42623_Idx] != null) { addChar(s_42623[s_42623_Idx], 36); } else { s_42623[s_42623_Idx] = [36, 0]; };
						i_42629 += 2;
						break;
					case 49:
					case 50:
					case 51:
					case 52:
					case 53:
					case 54:
					case 55:
					case 56:
					case 57:
					case 45:
						var j_42673 = 0;
						i_42629 += 1;
						var negative_42683 = (formatstr_42624[i_42629] == 45);
						if (negative_42683) {
						i_42629 += 1;
						}
						
						L3: do {
								L4: while (true) {
								if (!(ConstSet2[formatstr_42624[i_42629]] != undefined)) break L4;
									j_42673 = (((j_42673 * 10) + formatstr_42624[i_42629]) - 48);
									i_42629 += 1;
								}
						} while(false);
						if (!(negative_42683)) {
						Tmp5 = (j_42673 - 1);
						}
						else {
						Tmp5 = ((a_42626 != null ? a_42626.length : 0) - j_42673);
						}
						
						var idx_42729 = Tmp5;
						if (((a_42626 != null ? (a_42626.length-1) : -1) < idx_42729)) {
						invalidFormatString_42602();
						}
						
						if (s_42623[s_42623_Idx] != null) { s_42623[s_42623_Idx] = (s_42623[s_42623_Idx].slice(0, -1)).concat(a_42626[idx_42729]); } else { s_42623[s_42623_Idx] = a_42626[idx_42729];};
						break;
					case 123:
						var j_42745 = (i_42629 + 2);
						var k_42746 = 0;
						var negative_42747 = (formatstr_42624[j_42745] == 45);
						if (negative_42747) {
						j_42745 += 1;
						}
						
						var isNumber_42757 = 0;
						L6: do {
								L7: while (true) {
								if (!!((ConstSet3[formatstr_42624[j_42745]] != undefined))) break L7;
									if ((ConstSet4[formatstr_42624[j_42745]] != undefined)) {
									k_42746 = (((k_42746 * 10) + formatstr_42624[j_42745]) - 48);
									if ((isNumber_42757 == 0)) {
									isNumber_42757 = 1;
									}
									
									}
									else {
										isNumber_42757 = -1;
									}
									
									j_42745 += 1;
								}
						} while(false);
						if ((isNumber_42757 == 1)) {
						if (!(negative_42747)) {
						Tmp8 = (k_42746 - 1);
						}
						else {
						Tmp8 = ((a_42626 != null ? a_42626.length : 0) - k_42746);
						}
						
						var idx_42804 = Tmp8;
						if (((a_42626 != null ? (a_42626.length-1) : -1) < idx_42804)) {
						invalidFormatString_42602();
						}
						
						if (s_42623[s_42623_Idx] != null) { s_42623[s_42623_Idx] = (s_42623[s_42623_Idx].slice(0, -1)).concat(a_42626[idx_42804]); } else { s_42623[s_42623_Idx] = a_42626[idx_42804];};
						}
						else {
							var x_42820 = findNormalized_42578((formatstr_42624.slice((i_42629 + 2), ((j_42745 - 1))+1).concat(0)), a_42626);
								if (!(0 <= x_42820)) Tmp9 = false; else {									Tmp9 = (x_42820 < (a_42626 != null ? (a_42626.length-1) : -1));								}							if (Tmp9) {
							if (s_42623[s_42623_Idx] != null) { s_42623[s_42623_Idx] = (s_42623[s_42623_Idx].slice(0, -1)).concat(a_42626[(x_42820 + 1)]); } else { s_42623[s_42623_Idx] = a_42626[(x_42820 + 1)];};
							}
							else {
							invalidFormatString_42602();
							}
							
						}
						
						i_42629 = (j_42745 + 1);
						break;
					case 97:
					case 98:
					case 99:
					case 100:
					case 101:
					case 102:
					case 103:
					case 104:
					case 105:
					case 106:
					case 107:
					case 108:
					case 109:
					case 110:
					case 111:
					case 112:
					case 113:
					case 114:
					case 115:
					case 116:
					case 117:
					case 118:
					case 119:
					case 120:
					case 121:
					case 122:
					case 65:
					case 66:
					case 67:
					case 68:
					case 69:
					case 70:
					case 71:
					case 72:
					case 73:
					case 74:
					case 75:
					case 76:
					case 77:
					case 78:
					case 79:
					case 80:
					case 81:
					case 82:
					case 83:
					case 84:
					case 85:
					case 86:
					case 87:
					case 88:
					case 89:
					case 90:
					case 128:
					case 129:
					case 130:
					case 131:
					case 132:
					case 133:
					case 134:
					case 135:
					case 136:
					case 137:
					case 138:
					case 139:
					case 140:
					case 141:
					case 142:
					case 143:
					case 144:
					case 145:
					case 146:
					case 147:
					case 148:
					case 149:
					case 150:
					case 151:
					case 152:
					case 153:
					case 154:
					case 155:
					case 156:
					case 157:
					case 158:
					case 159:
					case 160:
					case 161:
					case 162:
					case 163:
					case 164:
					case 165:
					case 166:
					case 167:
					case 168:
					case 169:
					case 170:
					case 171:
					case 172:
					case 173:
					case 174:
					case 175:
					case 176:
					case 177:
					case 178:
					case 179:
					case 180:
					case 181:
					case 182:
					case 183:
					case 184:
					case 185:
					case 186:
					case 187:
					case 188:
					case 189:
					case 190:
					case 191:
					case 192:
					case 193:
					case 194:
					case 195:
					case 196:
					case 197:
					case 198:
					case 199:
					case 200:
					case 201:
					case 202:
					case 203:
					case 204:
					case 205:
					case 206:
					case 207:
					case 208:
					case 209:
					case 210:
					case 211:
					case 212:
					case 213:
					case 214:
					case 215:
					case 216:
					case 217:
					case 218:
					case 219:
					case 220:
					case 221:
					case 222:
					case 223:
					case 224:
					case 225:
					case 226:
					case 227:
					case 228:
					case 229:
					case 230:
					case 231:
					case 232:
					case 233:
					case 234:
					case 235:
					case 236:
					case 237:
					case 238:
					case 239:
					case 240:
					case 241:
					case 242:
					case 243:
					case 244:
					case 245:
					case 246:
					case 247:
					case 248:
					case 249:
					case 250:
					case 251:
					case 252:
					case 253:
					case 254:
					case 255:
					case 95:
						var j_42828 = (i_42629 + 1);
						L10: do {
								L11: while (true) {
								if (!(ConstSet6[formatstr_42624[j_42828]] != undefined)) break L11;
									j_42828 += 1;
								}
						} while(false);
						var x_42847 = findNormalized_42578((formatstr_42624.slice((i_42629 + 1), ((j_42828 - 1))+1).concat(0)), a_42626);
							if (!(0 <= x_42847)) Tmp12 = false; else {								Tmp12 = (x_42847 < (a_42626 != null ? (a_42626.length-1) : -1));							}						if (Tmp12) {
						if (s_42623[s_42623_Idx] != null) { s_42623[s_42623_Idx] = (s_42623[s_42623_Idx].slice(0, -1)).concat(a_42626[(x_42847 + 1)]); } else { s_42623[s_42623_Idx] = a_42626[(x_42847 + 1)];};
						}
						else {
						invalidFormatString_42602();
						}
						
						i_42629 = j_42828;
						break;
					default: 
						invalidFormatString_42602();
						break;
					}
					}
					else {
						if (s_42623[s_42623_Idx] != null) { addChar(s_42623[s_42623_Idx], formatstr_42624[i_42629]); } else { s_42623[s_42623_Idx] = [formatstr_42624[i_42629], 0]; };
						i_42629 += 1;
					}
					
				}
		} while(false);

	
}

function nsuFormatOpenArray(formatstr_42870, a_42872) {
	var result_42873 = [null];

		result_42873[0] = nimCopy(null, mnewString(0), NTI138);
		nsuAddf(result_42873, 0, formatstr_42870, a_42872);

	return result_42873[0];

}

function dollar__78173(x_78178) {
	var result_78179 = null;

	var F={procname:"$.$",prev:framePtr,filename:"lib/nim/pure/rationals.nim",line:0};
	framePtr = F;
		F.line = 35;
		result_78179 = nimCopy(null, (cstrToNimstr((x_78178.num)+"").slice(0,-1)).concat(makeNimstrLit("/").slice(0,-1),cstrToNimstr((x_78178.den)+"")), NTI138);
	framePtr = F.prev;

	return result_78179;

}

function dollar__78014(x_78016) {
	var result_78017 = null;

	var F={procname:"chemical_capitalism.$",prev:framePtr,filename:"chemical_capitalism.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 15;
		result_78017 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("Resource with units $# and value $#"), [x_78016.units, dollar__78173(x_78016.value)]), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_78017;

}

function dollar__78287(x_78289) {
	var result_78290 = null;

	var F={procname:"chemical_capitalism.$",prev:framePtr,filename:"chemical_capitalism.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 48;
		result_78290 = nimCopy(null, nsuFormatOpenArray(makeNimstrLit("State(\x0A            money:    $#\x0A            energy:   $#\x0A            science:  $#\x0A            elements: $#\x0A        )"), [dollar__78014(x_78289.money), dollar__78014(x_78289.energy), dollar__78014(x_78289.science), dollar__78014(x_78289.elements)]), NTI138);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_78290;

}
var state_78293 = {money: newMoney_78187(), energy: newEnergy_78206(), science: newScience_78225(), elements: newElements_78250()};
window.alert(toJSStr(dollar__78287(state_78293)));
